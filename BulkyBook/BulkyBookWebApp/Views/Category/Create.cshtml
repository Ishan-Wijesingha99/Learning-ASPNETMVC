<!-- we can use model not just to access the arguments that were passed into View(), but we can also access Models -->
@model Category



<!-- here we will create a form that will POST the form data to the backend server, the backend server will then interact with the SQL database to INSERT that new category row -->
<form method="POST">
    <div class="border p-3 mt-4">

        <div class="row pb-2">
            <h2 class="text-primary">Create Category</h2>
            <hr />
        </div>

        <!-- this part is for server-side validation, if we want to display all the errors in one place rather than under each input, we can do that as well -->
        <!-- need to include asp-validation-summary="All" -->        
        <div asp-validation-summary="All">

        </div>



        <!-- for Name -->
        <div class="mb-3">
            <!-- asp-for just lets you access the properties of the model, and puts it as the innerHTML of the element -->
            <label asp-for="Name"></label>

            <!-- because of asp-for used in this input, when this form is posted, it will know that this input is for the Name property -->
            <input asp-for="Name" class="form-control"/>

            <!-- as long as we have asp-validation-for in this span, this html will only show when there is an error in the server-side validation -->
            <!-- need to indicate the name of the Model, so in this case we're doing validation for Name -->
            <!-- a default error message will be written inside the span as innerHTML -->
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <!-- for DisplayOrder -->
        <div class="mb-3">
            <!-- asp-for just lets you access the properties of the model, and puts it as the innerHTML of the element -->
            <label asp-for="DisplayOrder"></label>

            <!-- because of asp-for used in this input, when this form is posted, it will know that this input is for the Name property -->
            <input asp-for="DisplayOrder" class="form-control"/>

            <!-- as long as we have asp-validation-for in this span, this html will only show when there is an error in the server-side validation -->
            <!-- need to indicate the name of the Model, so in this case we're doing validation for DisplayOrder -->
            <!-- a default error message will be written inside the span as innerHTML -->
            <span asp-validation-for="DisplayOrder" class="text-danger"></span>
        </div>

        <!-- submit button and back button that takes you back to /Category/Index -->
        <div>
            <button type="submit" class="btn btn-primary" style="width:150px">Create</button>

            <!-- just by specifying asp-controller and asp-action, it knows to take the user to /Category/Index -->
            <a asp-controller="Category" asp-action="Index" class="btn btn-secondary" style="width:150px">Back to List</a>
        </div>

    </div>
</form>



<!-- if we want to implement client-side validation, we can use jQuery client-side validation, the jQuery scripts are included in the Shared file in _ValidationScriptsPartial.csthml -->
<!-- these jQuery client-side validations are just the stock-standard ones -->

<!-- by convention, partial view files start with _ -->

<!-- because our partial literally only contains scripts, we need to wrap it around a scripts section like this -->
@section Scripts {
    @{
        <!-- this is all you have to do to include a partial view -->
        <partial name="_ValidationScriptsPartial" />
    }
}

